---
# Source: neo4j/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-neo4j-secrets
  labels:
    app: neo4j
    chart: "neo4j-0.6.0"
    heritage: "Tiller"
    release: "RELEASE-NAME"
type: Opaque
data:
  neo4j-password: "bXlTZWNyZXRQYXNzd29yZA=="
---
# Source: neo4j/templates/tests/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-neo4j-tests
  labels:
    heritage: Tiller
    release: RELEASE-NAME
    chart: neo4j-0.6.0
    app: neo4j
data:
  run.sh: |-
    @test "Testing Neo4j cluster has quorum" {
      echo "checking if the cluster is up"
      check_machine() {
        name=$1
        end="$((SECONDS+90))"
        while true; do
          echo "testing http://neo4j:${NEO4J_SECRETS_PASSWORD}@$name:7474/db/data"
          out=`wget http://neo4j:${NEO4J_SECRETS_PASSWORD}@$name:7474/db/data -O - 2>&1`
          echo "out: $out"
          wget http://neo4j:${NEO4J_SECRETS_PASSWORD}@$name:7474/db/data -O - 2>&1
          response_code=$?
          echo "response: $response_code"
          [[ "0" = "$response_code" ]] && break
          [[ "${SECONDS}" -ge "${end}" ]] && exit 1
          sleep 1
        done
      }

      for id in {0..2}; do
        name="${STATEFULSET_NAME}-core-$id.${STATEFULSET_NAME}.${NAMESPACE}.svc.cluster.local"
        echo "checking $name"
        run check_machine $name
        echo $status
        echo $output
        [ "$status" -eq 0 ]
      done
    }

    @test "Testing we can get the cluster role of each server" {
      check_role() {
        name=$1
        end="$((SECONDS+90))"
        while true; do
          echo "checking cluster role: $name"
          kubectl exec $name -- bin/cypher-shell -u neo4j -p ${NEO4J_SECRETS_PASSWORD} "call dbms.cluster.role()"
          response_code=$?
          echo "response: $response_code"
          [[ "0" = "$response_code" ]] && break
          [[ "${SECONDS}" -ge "${end}" ]] && exit 1
          sleep 1
        done
      }

      for id in {0..2}; do
        name="${STATEFULSET_NAME}-core-$id"
        echo "checking role of $name"
        run check_role $name
        echo $status
        echo $output
        [ "$status" -eq 0 ]
      done

      # kill a machine and make sure it comes back again
      machine_to_kill="${STATEFULSET_NAME}-core-0"
      kubectl delete pod ${machine_to_kill}
      run check_role ${machine_to_kill}
      echo $status
      echo $output
      [ "$status" -eq 0 ]
    }

---
# Source: neo4j/templates/core-dns.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-neo4j
  labels:
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "neo4j-0.6.0"
    app: neo4j
    component: core
spec:
  clusterIP: None
  ports:
    - port: 7474
      targetPort: 7474
  selector:
    app: neo4j
    release: "RELEASE-NAME"
    component: core

---
# Source: neo4j/templates/tests/test-neo4j-cluster.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-neo4j-service-test-bttic"
  labels:
    heritage: Tiller
    release: RELEASE-NAME
    chart: neo4j-0.6.0
    app: neo4j
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: RELEASE-NAME-ui-test
      image: markhneedham/k8s-kubectl:master
      env:
        - name: "STATEFULSET_NAME"
          value: "RELEASE-NAME-neo4j"
        - name: "NAMESPACE"
          value: default
        - name: NEO4J_SECRETS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-neo4j-secrets
              key: neo4j-password
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  initContainers:
  - name: test-framework
    image: "dduportal/bats:0.4.0"
    command: ["bash", "-c", "set -ex\ncp -R /usr/local/libexec/ /tools/bats/"]
    volumeMounts:
      - mountPath: "/tools"
        name: tools
  volumes:
  - name: tests
    configMap:
      name: RELEASE-NAME-neo4j-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never

---
# Source: neo4j/templates/readreplicas-deployment.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: "RELEASE-NAME-neo4j-replica"
  labels:
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: neo4j-0.6.0
    app: neo4j
    component: replica
spec:
  replicas: 0
  template:
    metadata:
      labels:
        app: neo4j
        release: "RELEASE-NAME"
        component: replica
    spec:
      containers:
      - name: neo4j
        image: "gcr.io/neo4j-k8s-marketplace-public/neo4j:3.3.4"
        imagePullPolicy: "IfNotPresent"
        env:
          - name: NEO4J_dbms_mode
            value: READ_REPLICA
          - name: NEO4J_dbms_security_auth__enabled
            value: "true"
          - name: NEO4J_causal__clustering_discovery__type
            value: DNS
          - name: NEO4J_causal__clustering_initial__discovery__members
            value: "RELEASE-NAME-neo4j.default.svc.cluster.local:5000"
          - name: NEO4J_SECRETS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-neo4j-secrets
                key: neo4j-password
        command:
          - "/bin/bash"
          - "-c"
          - |
            export NEO4J_dbms_connectors_default__advertised__address=$(hostname -f)
            export NEO4J_causal__clustering_transaction__advertised__address=$(hostname -f):6000

            if [ "${AUTH_ENABLED:-}" == "true" ]; then
              export NEO4J_AUTH="neo4j/${NEO4J_SECRETS_PASSWORD}"
            else
              export NEO4J_AUTH="none"
            fi

            exec /docker-entrypoint.sh "neo4j"
        ports:
        - containerPort: 7474
          name: browser
        - containerPort: 7687
          name: bolt
        - containerPort: 6000
          name: tx
        volumeMounts:
        - name: plugins
          mountPath: /plugins
        securityContext:
          privileged: true
      volumes:
        - name: plugins
          emptyDir: {}

---
# Source: neo4j/templates/core-statefulset.yaml
apiVersion: "apps/v1beta1"
kind: StatefulSet
metadata:
  name: "RELEASE-NAME-neo4j-core"
spec:
  serviceName: RELEASE-NAME-neo4j
  replicas: 3
  selector:
    matchLabels:
      release: "RELEASE-NAME"
      app: neo4j
      component: core
  template:
    metadata:
      labels:
        heritage: "Tiller"
        release: "RELEASE-NAME"
        chart: "neo4j-0.6.0"
        app: neo4j
        component: core
    spec:
      containers:
      - name: RELEASE-NAME-neo4j
        image: "gcr.io/neo4j-k8s-marketplace-public/neo4j:3.3.4"
        imagePullPolicy: "IfNotPresent"
        env:
          - name: NEO4J_dbms_mode
            value: CORE
          - name: NUMBER_OF_CORES
            value: "3"
          - name: AUTH_ENABLED
            value: "true"
          - name: NEO4J_causal__clustering_discovery__type
            value: DNS
          - name: NEO4J_causal__clustering_initial__discovery__members
            value: "RELEASE-NAME-neo4j.default.svc.cluster.local:5000"
          - name: NEO4J_SECRETS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-neo4j-secrets
                key: neo4j-password
        command:
          - "/bin/bash"
          - "-c"
          - |
            export NEO4J_dbms_connectors_default__advertised__address=$(hostname -f)
            export NEO4J_causal__clustering_discovery__advertised__address=$(hostname -f):5000
            export NEO4J_causal__clustering_transaction__advertised__address=$(hostname -f):6000
            export NEO4J_causal__clustering_raft__advertised__address=$(hostname -f):7000

            if [ "${AUTH_ENABLED:-}" == "true" ]; then
              export NEO4J_AUTH="neo4j/${NEO4J_SECRETS_PASSWORD}"
            else
              export NEO4J_AUTH="none"
            fi

            exec /docker-entrypoint.sh "neo4j"
        ports:
        - containerPort: 5000
          name: discovery
        - containerPort: 7000
          name: raft
        - containerPort: 6000
          name: tx
        - containerPort: 7474
          name: browser
        - containerPort: 7687
          name: bolt
        securityContext:
          privileged: true
        volumeMounts:
        - name: datadir
          mountPath: "/data"
          subPath: ""
        volumeMounts:
        - name: plugins
          mountPath: /plugins
        resources:
          - ""
          
      volumes:
        - name: plugins
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: "standard"
        resources:
          requests:
            storage: "10Gi"

